{
  "openapi": "3.0.2",
  "info": {
    "title": "UMP REST API",
    "version": "3.1.0"
  },
  "paths": {
    "/cachedDataModels/{deviceId}": {
      "get": {
        "tags": [
          "CachedDataModels"
        ],
        "description": "Get values for device data model parameters given in query parameter.\n    ",
        "operationId": "cachedDataModels_getParameters",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "List of data model parameters to retrieve.\nIf parameters list is empty then complete data model is returned.\nData model path parts should be dot-separated.\nParameter name should not contain the root object, for example use *DeviceSummary* instead *InternetGatewayDevice.DeviceSummary*.\nQuery for all sub-parameters of given object should end with dot \".\", for example: parameters=Location.\n                ",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataModelParameter"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "description": "Find device entities using search criteria. List of device identities is returned.",
        "operationId": "devices_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **blacklisted** (boolean): eq\n - **provisioningEnabled** (boolean): eq\n - **lastSessionTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **lastBootstrapTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **lastRebootTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **creationTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **ipAddress** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **serialNumber** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **oui** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **modelName** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **hardwareVersion** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **softwareVersion** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **productClass** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **manufacturer** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **directGroups** ([string]): contains, notcontains, containsany\n - **groups** ([string]): contains, notcontains, containsany\n - **properties.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **blacklisted** (boolean): eq\n - **provisioningEnabled** (boolean): eq\n - **lastSessionTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **lastBootstrapTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **lastRebootTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **creationTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **ipAddress** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **serialNumber** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **oui** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **modelName** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **hardwareVersion** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **softwareVersion** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **productClass** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **manufacturer** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **directGroups** ([string]): contains, notcontains, containsany\n - **groups** ([string]): contains, notcontains, containsany\n - **properties.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceIdDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "description": "Create new device entity.",
        "operationId": "devices_create",
        "parameters": [
          {
            "name": "updateIfExisting",
            "in": "query",
            "description": "Parameter indicating whether the endpoint should update device with passed data.",
            "explode": false,
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateDeviceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/devices/updateIp": {
      "post": {
        "tags": [
          "Devices"
        ],
        "description": "Update IP address and connectionRequestUrl property. Device with given MAC is updated. No specific format of MAC address required",
        "operationId": "devices_updateIp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/devices/{id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "description": "Get device entity by identity.",
        "operationId": "devices_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "description": "Update device entity.",
        "operationId": "devices_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "description": "Delete device entity.",
        "operationId": "devices_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/devicesAuth/checkCredentials": {
      "post": {
        "tags": [
          "DevicesAuth"
        ],
        "operationId": "devicesAuth_checkCredentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "ipAddress": {
                    "type": "string"
                  }
                },
                "required": [
                  "login",
                  "password",
                  "ipAddress"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResult"
                }
              }
            }
          }
        }
      }
    },
    "/devicesAuth/verifyExists/{login}": {
      "get": {
        "tags": [
          "DevicesAuth"
        ],
        "operationId": "devicesAuth_verifyExists",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExistenceResult"
                }
              }
            }
          }
        }
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "description": "Find domain entities using search criteria. List of domain identities is returned.",
        "operationId": "domains_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainIdDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "description": "\nCreate or update existing domain entity.\n\nDomain identity consist of the root domain name `/` followed by any number of sub-domain names.\nA sub-domain name consists of any number of alphanumeric or '_' characters followed by '/'.\n\nFor example domain identity: `/domain/sub_domain/` consists of 3 domain names:\n `/` which is parent of `domain/` which is parent of `sub_domain/`.\n\nIf posted domain identity contains nonexistent ancestor then ancestor hierarchy will be created automatically",
        "operationId": "domains_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/domains/onlineDevicesCount/{id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "description": "Get online devices in domain count.",
        "operationId": "domains_getOnlineDevicesCount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DomainIdDTO"
            }
          },
          {
            "name": "includeSubdomains",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "periodInHours",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 24
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/domains/statistics/{id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "description": "Get domain statistics by identity.",
        "operationId": "domains_getStatistics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DomainIdDTO"
            }
          },
          {
            "name": "includeSubdomains",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainStatisticsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "description": "Get domain by identity.",
        "operationId": "domains_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DomainIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "description": "Update existing domain entity.",
        "operationId": "domains_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DomainIdDTO"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newDescription": {
                    "type": "string"
                  }
                },
                "required": [
                  "newDescription"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "description": "Delete domain entity.\nThis operation will fail if the domain has sub-domains unless recursively is set to true,\nin that case the domain will be deleted together with all it's sub-domains.\n    ",
        "operationId": "domains_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DomainIdDTO"
            }
          },
          {
            "name": "recursively",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/groupConnectionRequests": {
      "get": {
        "tags": [
          "GroupConnectionRequests"
        ],
        "description": "Find group connection request entities using search criteria.",
        "operationId": "groupConnectionRequests_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **groupId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **active** (boolean): eq\n - **minimumInterval** (integer($int32)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **speed** (integer($int32)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **startTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **endTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **appliesToSubgroups** (boolean): eq\n - **continuous** (boolean): eq\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **groupId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **active** (boolean): eq\n - **minimumInterval** (integer($int32)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **speed** (integer($int32)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **startTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **endTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **appliesToSubgroups** (boolean): eq\n - **continuous** (boolean): eq\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupConnectionRequestDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GroupConnectionRequests"
        ],
        "description": "Create group connection request.",
        "operationId": "groupConnectionRequests_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupConnectionRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groupConnectionRequests/getForGroup/{groupId}": {
      "get": {
        "tags": [
          "GroupConnectionRequests"
        ],
        "description": "Get group connection request entity by group.",
        "operationId": "groupConnectionRequests_getForGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupConnectionRequestDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groupConnectionRequests/{groupId}/{name}": {
      "put": {
        "tags": [
          "GroupConnectionRequests"
        ],
        "description": "Update group connection request.",
        "operationId": "groupConnectionRequests_update",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupConnectionRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GroupConnectionRequests"
        ],
        "description": "Delete group connection request entity.",
        "operationId": "groupConnectionRequests_delete",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "description": "Find group entities using search criteria. List of group identities is returned.",
        "operationId": "groups_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupId"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Create group entity.</br>\nGroup identity consists of dot-separated all parent groups names and the group name, staring form root group.</br>\nDomain name consists of slash-separated all parent domain names and the domain name, starting from / domain</br>\nDomain field is optional, and if not given, user's domain is used<br>\nExample request body:</br>\n{</br>\n&nbsp;&nbsp;\"id\": \"root.parent1.parent2.groupName\",</br>\n&nbsp;&nbsp;\"domain\": \"/parentDomain/yourDomain/\",</br>\n&nbsp;&nbsp;\"description\": \"group description\"</br>\n}</br>\nWhen group id with not existing parent group names is given then\nparent groups are created automatically.",
        "operationId": "groups_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "description": "Get group entity by identity.",
        "operationId": "groups_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "description": "Update existing group entity.",
        "operationId": "groups_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "domain": {
                    "nullable": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/DomainIdDTO"
                      }
                    ]
                  }
                },
                "required": [
                  "description"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "description": "Delete group entity.",
        "operationId": "groups_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/monitoring": {
      "get": {
        "tags": [
          "MonitoringConfiguration"
        ],
        "description": "Search existing monitoring instances.",
        "operationId": "monitoring_getMonitoringConfigurations",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **group** ([string]): contains, notcontains, containsany\n - **samplingInterval** (integer($int32)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **active** (boolean): eq\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **condition** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **group** ([string]): contains, notcontains, containsany\n - **samplingInterval** (integer($int32)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **active** (boolean): eq\n - **description** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **condition** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "MonitoringConfiguration"
        ],
        "description": "Create new monitoring instance.",
        "operationId": "monitoring_createMonitoring",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonitoringConfigurationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/monitoring/{monitoringName}": {
      "get": {
        "tags": [
          "MonitoringConfiguration"
        ],
        "description": "Get monitoring configuration.",
        "operationId": "monitoring_getMonitoringConfiguration",
        "parameters": [
          {
            "name": "monitoringName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringConfigurationDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MonitoringConfiguration"
        ],
        "description": "Update monitoring configuration.",
        "operationId": "monitoring_updateMonitoring",
        "parameters": [
          {
            "name": "monitoringName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonitoringConfigurationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MonitoringConfiguration"
        ],
        "description": "Remove monitoring instance.",
        "operationId": "monitoring_removeMonitoring",
        "parameters": [
          {
            "name": "monitoringName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/monitoringData/aggregates/numerical/{monitoringName}/{groupId}/{resourceName}": {
      "get": {
        "tags": [
          "MonitoringData"
        ],
        "description": "Get aggregated numerical resource data.\nThe time span of single returned aggregate depends on requested time range (fromDate, toDate):\nless than one day - minute aggregates, less than one month - hour aggregates, otherwise - day aggregates.\nDefault fromDate value is one day before toDate.\nDefault fromDate value is one day before toDate.\nDefault toDate value is current time.\n    \n      ",
        "operationId": "monitoringData_aggregates_getNumericalAggregates",
        "parameters": [
          {
            "name": "monitoringName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "default": null
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "default": null
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumericalAggregate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/monitoringData/aggregates/textual/{monitoringName}/{groupId}/{resourceName}": {
      "get": {
        "tags": [
          "MonitoringData"
        ],
        "description": "Get aggregated textual resource data.\nThe time span of single returned aggregate depends on requested time range (fromDate, toDate):\nless than one day - minute aggregates, less than one month - hour aggregates, otherwise - day aggregates.\nDefault fromDate value is one day before toDate.\nDefault fromDate value is one day before toDate.\nDefault toDate value is current time.\n    \n       ",
        "operationId": "monitoringData_aggregates_getTextualAggregates",
        "parameters": [
          {
            "name": "monitoringName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "default": null
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "default": null
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TextualAggregate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/monitoringData/moreSamples": {
      "get": {
        "tags": [
          "MonitoringData"
        ],
        "description": "Get next sample batch for cursor value obtained from GET on /samples or previous GET on /moreSamples",
        "operationId": "monitoringData_getMoreSamples",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": true,
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/SampleCursor"
            }
          },
          {
            "name": "count",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 512
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleBatch"
                }
              }
            }
          }
        }
      }
    },
    "/monitoringData/samples/{monitoringName}/{deviceId}": {
      "get": {
        "tags": [
          "MonitoringData"
        ],
        "description": "Get cursor for all samples for given monitoring within given time period.\nDefault fromDate value is one day before toDate.\nDefault toDate value is current time.\n    \n      ",
        "operationId": "monitoringData_sampleCursor",
        "parameters": [
          {
            "name": "monitoringName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "default": null
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "default": null
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleCursor"
                }
              }
            }
          }
        }
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "description": "Get user permission IDs.",
        "operationId": "permissions_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/propertyServices": {
      "get": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Get information about existing PropertyServices and configuration.",
        "operationId": "propertyServices_getAllowedKeys",
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/propertyServices/{id}": {
      "get": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Get Information about PropertyService instance.",
        "operationId": "propertyServices_getServiceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "explode": false,
            "schema": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/DomainIdDTO"
                }
              ]
            }
          },
          {
            "name": "returnMatchedDevice",
            "in": "query",
            "description": "Parameter indicating whether the endpoint should find and return a matched device. Disclaimer: if it is set to true, a query to a device collection will be made to the properties.key field, which may cause performance issues. Also, if it is frequently used, consider contacting AVSystem to ensure that an additional index is added to optimize this query.",
            "explode": false,
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": true
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyServiceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyServices"
        ],
        "description": "\nCreate or edit PropertyService. If PropertyService already exists its properties will be merged with one sent in this request.\nOtherwise new PropertyService will be created.\nAlso, remember to provide the domain name within slashes (example: /domain/).\n",
        "operationId": "propertyServices_put_createOrUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyServiceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Delete PropertyService.",
        "operationId": "propertyServices_deleteServiceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "explode": false,
            "schema": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/DomainIdDTO"
                }
              ]
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Modify ProperyService. One can modify only existing services.",
        "operationId": "propertyServices_patch_partialUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyServiceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/propertyServices/{key}/{value}": {
      "get": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Get Information about PropertyService instance.",
        "operationId": "propertyServices_getService",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "explode": false,
            "schema": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/DomainIdDTO"
                }
              ]
            }
          },
          {
            "name": "returnMatchedDevice",
            "in": "query",
            "description": "Parameter indicating whether the endpoint should find and return a matched device. Disclaimer: if it is set to true, a query to a device collection will be made to the properties.key field, which may cause performance issues. Also, if it is frequently used, consider contacting AVSystem to ensure that an additional index is added to optimize this query.",
            "explode": false,
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": true
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyServiceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyServices"
        ],
        "description": "\nCreate or edit PropertyService. If PropertyService already exists its properties will be merged with one sent in this request.\nOtherwise new PropertyService will be created.\nAlso, remember to provide the domain name within slashes (example: /domain/).\n",
        "operationId": "propertyServices_createOrUpdate",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyServiceConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Delete PropertyService for given domain",
        "operationId": "propertyServices_deleteService",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "explode": false,
            "schema": {
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/DomainIdDTO"
                }
              ]
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "PropertyServices"
        ],
        "description": "Modify ProperyService. One can modify only existing services.",
        "operationId": "propertyServices_partialUpdate",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyServiceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "description": "Find resources using search criteria. List of resource identities is returned.",
        "operationId": "resources_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **category** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **filename** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **device** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **fileSize** (integer($int64)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **location** (string): eq\n - **addDate** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **domain** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **directGroups** ([string]): contains, notcontains, containsany\n - **expires** (boolean): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **category** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **filename** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **device** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **fileSize** (integer($int64)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **location** (string): eq\n - **addDate** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **domain** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **directGroups** ([string]): contains, notcontains, containsany\n - **expires** (boolean): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "description": "\nCreate new resource entity. If id is set, resource entity with given id must not exists.\"\n\nIf file location is INTERNAL, entity will be created with empty file placeholder.\n\nIf file location is EXTERNAL, pass file url to filename attribute.\n",
        "operationId": "resources_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceId"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/file/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "description": "Get resource file by id.",
        "operationId": "resources_getFile",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ResourceId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 127,
                    "minimum": -128
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Resources"
        ],
        "description": "Update resource file.",
        "operationId": "resources_updateFile",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ResourceId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "description": "\nGet resource entity by id.\n",
        "operationId": "resources_get",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ResourceId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Resources"
        ],
        "description": "Update resource entity.",
        "operationId": "resources_update",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ResourceId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceDTO"
                  }
                ],
                "example": "{\n  \"name\": \"name\",\n  \"description\": \"description\",\n  \"category\": \"UNKNOWN\",\n  \"filename\": \"filename\",\n  \"fileSize\": 0,\n  \"device\": \"deviceId\",\n  \"fileType\": \"fileType\",\n  \"username\": \"username\",\n  \"password\": \"password\",\n  \"location\": \"INTERNAL\",\n  \"domain\": \"/\",\n  \"dataId\": \"dataId\",\n  \"properties\": {\n    \"additionalProp1\": \"value1\",\n    \"additionalProp2\": \"value2\",\n    \"additionalProp3\": \"value3\"\n  },\n  \"directGroups\": [\n    \"group\"\n  ],\n  \"isStaticContent\": false,\n  \"expressionAlias\": \"expressionAlias\",\n  \"expires\": false\n}"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "description": "Delete resource entity.",
        "operationId": "resources_delete",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ResourceId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{deviceId}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "description": "Start new provisioning session with device",
        "operationId": "sessions_startNewSession",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/settingValues": {
      "get": {
        "tags": [
          "SettingValues"
        ],
        "description": "Find Setting values using search criteria. List of Setting values is returned.",
        "operationId": "settingValues_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **groupId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **value** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **locked** (boolean): eq\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **groupId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **value** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **locked** (boolean): eq\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingValueDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SettingValues"
        ],
        "description": "Create or update Setting Value.",
        "operationId": "settingValues_createOrUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingValueDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/settingValues/deviceProfile/{deviceId}": {
      "get": {
        "tags": [
          "SettingValues"
        ],
        "description": "Get Setting Values profile for given device.\nThe profile consists of setting values inherited from all groups device belongs to.\nIf withDeviceProperties parameter is true then additionally all device properties are returned.",
        "operationId": "settingValues_getForDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          },
          {
            "name": "withDeviceProperties",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingValueDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settingValues/groupProfile/{groupId}": {
      "get": {
        "tags": [
          "SettingValues"
        ],
        "description": "Get Setting Values profile for given group.\nThe profile consists of Setting values inherited from all parent groups.",
        "operationId": "settingValues_getForGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingValueDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taskReports": {
      "get": {
        "tags": [
          "TaskReports"
        ],
        "description": "Find Task Reports using search criteria. List of Task Reports identities is returned.",
        "operationId": "taskReports_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **taskId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **deviceId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **startTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **finishTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **lastUpdateTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **status** (#/components/schemas/TaskStatus): in, notexists, exists, eq, ne, nin\n - **summary** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **taskId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **deviceId** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **startTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **finishTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **lastUpdateTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **status** (#/components/schemas/TaskStatus): in, notexists, exists, eq, ne, nin\n - **summary** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskReportId"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taskReports/{taskId}/{deviceId}": {
      "get": {
        "tags": [
          "TaskReports"
        ],
        "description": "[DEPRECATED, use GET /taskReports/{taskReportId} instead] Get Task Report for given task and device. Task report is created after task is executed on device.\nIf task was not executed yet, it returns NOT FOUND.",
        "operationId": "taskReports_get_get",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskReportDTO"
                }
              }
            }
          }
        }
      }
    },
    "/taskReports/{taskReportId}": {
      "get": {
        "tags": [
          "TaskReports"
        ],
        "description": "Get Task Report for given task report ID. Task report is created after task is executed on device.\nIf task was not executed yet, it returns NOT FOUND.",
        "operationId": "taskReports_get",
        "parameters": [
          {
            "name": "taskReportId",
            "in": "path",
            "description": "TaskId and deviceId separated by a colon",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RawTaskReportId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskReportDTO"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Find task entities using search criteria. List of task identities is returned.",
        "operationId": "tasks_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **group** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **device** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **creationTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **active** (boolean): eq\n - **properties.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **parameters.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **id** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **group** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **device** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **name** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **creationTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **active** (boolean): eq\n - **properties.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **parameters.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskId"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/callback/{taskId}/{callbackName}": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "description": "Delete callback registered on given task identity.",
        "operationId": "tasks_deleteCallback",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          },
          {
            "name": "callbackName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get task entity by identity.",
        "operationId": "tasks_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "description": "Update task entity.",
        "operationId": "tasks_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "description": "Delete task entity.",
        "operationId": "tasks_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/tasksFromTemplates/device/{deviceId}": {
      "post": {
        "tags": [
          "TasksFromTemplates"
        ],
        "description": "Create task that will be executed on device with given identity.\nTask definition will be copied from task template with given name.\nSome values from template fields can be overwritten in given TaskConfig.\nIf callback is registered, the TaskReportDTO will be sent to it using HTTP POST each time task finishes execution.\nThe result of this method is created Task identity.",
        "operationId": "tasksFromTemplates_addForDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateInvocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskId"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasksFromTemplates/deviceBlocking/{deviceId}": {
      "post": {
        "tags": [
          "TasksFromTemplates"
        ],
        "description": "Create task that will be executed on device with given identity.\nSession will be triggered to execute the task.\nTask definition will be copied from task template with given name.\nSome values from template fields can be overwritten in given TaskConfig.\nThis method will wait up to waitTimeSeconds for task execution and returns TaskReport.\nIf task will not execute in given time period the TaskReport with NotStarted status will be returned.\nIf callback is registered, the TaskReportDTO will be sent to it using HTTP POST each time task finishes execution.",
        "operationId": "tasksFromTemplates_addForDeviceBlocking",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          },
          {
            "name": "waitTimeSeconds",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateInvocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskReportDTO"
                }
              }
            }
          }
        }
      }
    },
    "/tasksFromTemplates/group/{groupId}": {
      "post": {
        "tags": [
          "TasksFromTemplates"
        ],
        "description": "Create task that will be executed on all devices in given group.\nTask definition will be copied from task template with given name.\nSome values from template fields can be overwritten in given TaskConfig.\nIf callback is registered, the TaskReportDTO will be sent to it using HTTP POST each time task finishes execution on each device.\nThe result of this method is created Task identity.",
        "operationId": "tasksFromTemplates_addForGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GroupId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateInvocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskId"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasksUtils/restart/{taskId}": {
      "post": {
        "tags": [
          "TasksUtils"
        ],
        "description": "Schedules task restart globally. Task will be executed on next device's session if tasks execution condition allows it to run. No new task is created",
        "operationId": "tasksUtils_restart",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/tasksUtils/restart/{taskId}/{deviceId}": {
      "post": {
        "tags": [
          "TasksUtils"
        ],
        "description": "Schedules task restart on specified device. Task will be executed on next device's session if tasks execution condition allows it to run. No new task is created",
        "operationId": "tasksUtils_post_restart",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/tasksUtils/restartBlocking/{taskId}/{deviceId}": {
      "post": {
        "tags": [
          "TasksUtils"
        ],
        "description": "\nSchedules task restart on specified device.\nSession will be triggered to execute the task.\nThis method will wait up to waitTimeSeconds for task execution and returns TaskReport.\nIf task will not execute in given time period the TaskReport with NotStarted status will be returned.\nNo new task is created.\n",
        "operationId": "tasksUtils_restartForDeviceBlocking",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TaskId"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          },
          {
            "name": "waitTimeSeconds",
            "in": "query",
            "explode": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskReportDTO"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get data for currently logged user",
        "operationId": "user_get",
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Find users by condition.",
        "operationId": "users_find",
        "parameters": [
          {
            "name": "searchCriteria",
            "in": "query",
            "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **login** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **fullname** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **active** (boolean): eq\n - **superUser** (boolean): eq\n - **staff** (boolean): eq\n - **activityLogging** (boolean): eq\n - **domain** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **accessSchedule** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **securityPolicy** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **email** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **phoneNumber** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **expirationDate** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **creationTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **roles** ([string]): contains, notcontains, containsany\n - **permissions** ([string]): contains, notcontains, containsany\n - **preferences.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **properties.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "csv",
              "description": "\n\n Comma separated list of conditions. Conditions are concatenated using *AND* logical operator.\n Condition has form: *fieldName operator value*\n ## Available fields and operators:\n  - **login** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **fullname** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **active** (boolean): eq\n - **superUser** (boolean): eq\n - **staff** (boolean): eq\n - **activityLogging** (boolean): eq\n - **domain** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **accessSchedule** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **securityPolicy** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **email** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **phoneNumber** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **expirationDate** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **creationTime** (string($date-time)): in, gte, notexists, exists, lte, gt, eq, ne, nin, lt\n - **roles** ([string]): contains, notcontains, containsany\n - **permissions** ([string]): contains, notcontains, containsany\n - **preferences.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n - **properties.&ast;** (string): in, gte, startswith, endswith, exists, lte, matches, gt, eq, notexists, strcontains, ne, nin, lt\n\n ## Value types:\n - *string* - surround with single quotes: '. Escape single quotes in queries with another single quote: ''. E.g. 'Cite: ''cited text''.'.\n - *boolean* - true or false\n - *string($date-time)* - string in the ISO8601 format\n - *string($byte)* - base64 encoded string\n - *numeric* - for example: 0.123, 123, 12.123\n - *[Value type]* - array of value types. Array has the form of: [item1, item2, ...]\n - *object* - JSON object wrapped in backtick: \\`. Escape backtick inside JSON string with another backtick: \\`\\`. E.g. \\`{\"backtick\": \"\\`\\`\"}\\`\n\n ## Operators:\n  - **eq** - Field value is equal to condition value. Condition Value Type = Field Type\n - **ne** - Field value is different than condition value. Condition Value Type = Field Type\n - **in** - Field value is equal to one of the given values. Condition Value Type = [Field Type]\n - **nin** - Field value is different than all given values. Condition Value Type = [Field Type]\n - **exists** - Field does exists. Condition does not have value and has form *fieldName operator*\n - **notexists** - Field does not exists. Condition does not have value and has form *fieldName operator*\n - **gt** - Field value is greater than given value. Condition Value Type = Field Type\n - **gte** - Field value is greater or equal to given value. Condition Value Type = Field Type\n - **lt** - Field value is lower than given value. Condition Value Type = Field Type\n - **lte** - Field value is lower or equal to given value. Condition Value Type = Field Type\n - **contains** - Field value contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **notcontains** - Field value not contains the given value. Applicable only to collection fields. Condition Value Type = Field Item Type\n - **containsany** - Field value contains any of the given values. Applicable only to collection fields. Condition Value Type = Field Type\n - **strcontains** - Field value contains given substring. Applicable only to string fields. Condition Value Type = string\n - **matches** - Field value matches given regular expression. Applicable only to string fields. Condition Value Type = string\n - **startswith** - Field value starts with given string. Applicable only to string fields. Condition Value Type = string\n - **endswith** - Field value ends with given string. Applicable only to string fields. Condition Value Type = string\n\n ## Examples:\n - *someStringField eq 'string'*\n - *someDateCollection containsany ['2012-09-01T08:51:23.180Z', '2012-09-02T08:51:23.180Z']*\n - *someMapField.keyName eq 'value'*\n - *someBooleanField eq true*\n      ",
              "default": ""
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserId"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/login/{login}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get user data by login.",
        "operationId": "users_getByLogin",
        "parameters": [
          {
            "name": "login",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get user data by ID.",
        "operationId": "users_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Remove user by ID.",
        "operationId": "users_remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Successful"
                }
              }
            }
          }
        }
      }
    },
    "/workflowServices/{deviceId}": {
      "get": {
        "tags": [
          "WorkflowServices"
        ],
        "description": "Get information about available workflows at a specific device ",
        "operationId": "workflowServices_getWorkflowNames",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          }
        ],
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflowServices/{deviceId}/{workflowId}": {
      "post": {
        "tags": [
          "WorkflowServices"
        ],
        "description": "Synchronously executes a workflow on a specific device with given parameters",
        "operationId": "workflowServices_executeWorkflow",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceIdDTO"
            }
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "\nWorkflow request body can contain an arbitrary JSON object, i.e.\n<pre><code>\n{\n  \"stringKey\": \"stringValue\",\n  \"booleanKey\": true,\n  \"numberKey\": 1,\n  \"arrayKey\": [1, 2, 3],\n  \"objectKey\": {\n     \"nestedStringKey\": \"nestedStringValue\",\n     \"nestedNumber\": 2\n  }\n}\n</pre></code>\nThe workflow author decides on request body schema, required fields and their meaning.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "example": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "request forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload Too Large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowResultDTO"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://demo.avsystem.com:8086/api/ump/v3"
    }
  ],
  "components": {
    "schemas": {
      "AuthenticationResult": {
        "type": "object",
        "properties": {
          "authenticated": {
            "type": "boolean"
          }
        },
        "required": [
          "authenticated"
        ]
      },
      "CreateOrUpdateDeviceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DeviceIdDTO"
          },
          "directGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          },
          "addGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "removeGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "addProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "removeProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "blacklisted": {
            "type": "boolean",
            "default": false
          },
          "provisioningEnabled": {
            "type": "boolean",
            "default": true
          },
          "lastSessionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastEmptySessionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastBootstrapTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastRebootTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "ipAddress": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "serialNumber": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "oui": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "modelName": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "hardwareVersion": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "softwareVersion": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "productClass": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "manufacturer": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "id"
        ]
      },
      "DataModelParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "value",
          "type",
          "updateTime"
        ]
      },
      "DeviceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DeviceIdDTO"
          },
          "directGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "blacklisted": {
            "type": "boolean",
            "default": false
          },
          "provisioningEnabled": {
            "type": "boolean",
            "default": true
          },
          "lastSessionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastEmptySessionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastBootstrapTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastRebootTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "ipAddress": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "serialNumber": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "oui": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "modelName": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "hardwareVersion": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "softwareVersion": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "productClass": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "manufacturer": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "id"
        ]
      },
      "DeviceIdDTO": {
        "type": "string",
        "title": "DeviceId"
      },
      "DeviceUpdate": {
        "type": "object",
        "properties": {
          "addProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "removeProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "addGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "removeGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "blacklisted": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "provisioningEnabled": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "lastSessionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastBootstrapTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "lastRebootTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "ipAddress": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "serialNumber": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "oui": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "modelName": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "hardwareVersion": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "softwareVersion": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "productClass": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "manufacturer": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        }
      },
      "DomainDTO": {
        "type": "object",
        "title": "Domain",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DomainIdDTO"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "description"
        ]
      },
      "DomainIdDTO": {
        "type": "string",
        "title": "DomainId"
      },
      "DomainStatisticsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DomainIdDTO"
          },
          "devices": {
            "type": "integer",
            "format": "int64"
          },
          "users": {
            "type": "integer",
            "format": "int64"
          },
          "lastGuiActivityTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "devices",
          "users",
          "lastGuiActivityTime"
        ]
      },
      "ExistenceResult": {
        "type": "object",
        "properties": {
          "deviceExists": {
            "type": "boolean"
          }
        },
        "required": [
          "deviceExists"
        ]
      },
      "GroupConnectionRequestDTO": {
        "type": "object",
        "properties": {
          "groupId": {
            "$ref": "#/components/schemas/GroupId"
          },
          "name": {
            "type": "string"
          },
          "minimumInterval": {
            "type": "integer",
            "format": "int32"
          },
          "speed": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "appliesToSubgroups": {
            "type": "boolean"
          },
          "continuous": {
            "type": "boolean",
            "nullable": true
          },
          "domain": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DomainIdDTO"
              }
            ],
            "default": null
          }
        },
        "required": [
          "groupId",
          "name",
          "minimumInterval",
          "speed",
          "startTime",
          "endTime",
          "active",
          "appliesToSubgroups",
          "continuous"
        ]
      },
      "GroupConnectionRequestUpdate": {
        "type": "object",
        "properties": {
          "minimumInterval": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "speed": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "active": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "appliesToSubgroups": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "continuous": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "domain": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DomainIdDTO"
              }
            ],
            "default": null
          }
        }
      },
      "GroupDTO": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/GroupId"
          },
          "domain": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DomainIdDTO"
              }
            ],
            "default": null
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "id"
        ]
      },
      "GroupId": {
        "type": "string"
      },
      "IpUpdate": {
        "type": "object",
        "properties": {
          "macAddress": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          }
        },
        "required": [
          "macAddress",
          "ipAddress"
        ]
      },
      "MonitoredResourceConfiguration": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "Textual",
              "Numerical"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/ResourceSource"
          },
          "storeSamples": {
            "type": "boolean"
          },
          "storeAggregates": {
            "type": "boolean"
          },
          "isPassive": {
            "type": "boolean"
          }
        },
        "required": [
          "displayName",
          "resourceType",
          "source",
          "storeSamples",
          "storeAggregates",
          "isPassive"
        ]
      },
      "MonitoringConfigurationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "targetGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupId"
            },
            "uniqueItems": true
          },
          "resourcesConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredResourceConfiguration"
            }
          },
          "samplingIntervalSeconds": {
            "type": "integer",
            "format": "int32",
            "default": 60
          },
          "description": {
            "type": "string",
            "default": ""
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "runCondition": {
            "type": "string",
            "default": ""
          },
          "excludeGroupsRegexPatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          }
        },
        "required": [
          "name",
          "targetGroups",
          "resourcesConfigurations"
        ]
      },
      "MonitoringConfigurationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "samplingIntervalSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "default": null
          },
          "addTargetGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupId"
            },
            "uniqueItems": true,
            "default": []
          },
          "removeTargetGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupId"
            },
            "uniqueItems": true,
            "default": []
          },
          "removeResourcesConfigurations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          },
          "addResourcesConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoredResourceConfiguration"
            },
            "default": []
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "isActive": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "runCondition": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "addExcludedGroupsPatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          },
          "removeExcludedGroupsPatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          }
        }
      },
      "MonitoringSample": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "numericResources": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          "textualResources": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "booleanResources": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean",
              "nullable": true
            },
            "default": {}
          }
        },
        "required": [
          "date",
          "numericResources",
          "textualResources"
        ]
      },
      "NumericalAggregate": {
        "type": "object",
        "properties": {
          "bucketStart": {
            "type": "string",
            "format": "date-time"
          },
          "bucketEnd": {
            "type": "string",
            "format": "date-time"
          },
          "sum": {
            "type": "number",
            "format": "double"
          },
          "sqrSum": {
            "type": "number",
            "format": "double"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "bucketStart",
          "bucketEnd",
          "sum",
          "sqrSum",
          "count"
        ]
      },
      "PropertyServiceConfig": {
        "type": "object",
        "properties": {
          "multiShot": {
            "type": "boolean"
          },
          "domain": {
            "type": "string",
            "default": "/"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          }
        },
        "required": [
          "multiShot"
        ]
      },
      "PropertyServiceDTO": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "multiShot": {
            "type": "boolean"
          },
          "isApplied": {
            "type": "boolean"
          },
          "domain": {
            "type": "string",
            "default": "/"
          },
          "matchedDeviceId": {
            "type": "string"
          }
        },
        "required": [
          "properties",
          "multiShot",
          "isApplied",
          "matchedDeviceId"
        ]
      },
      "PropertyServiceUpdate": {
        "type": "object",
        "properties": {
          "multiShot": {
            "type": "boolean"
          },
          "domain": {
            "type": "string",
            "default": "/"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "add": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "remove": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          }
        },
        "required": [
          "multiShot"
        ]
      },
      "RawTaskReportId": {
        "type": "string"
      },
      "ResourceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "name": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "description": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "category": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "filename": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "default": null
          },
          "device": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "fileType": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "username": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "password": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "location": {
            "type": "string",
            "nullable": true,
            "enum": [
              null,
              "INTERNAL",
              "EXTERNAL"
            ],
            "default": null
          },
          "addDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "default": null
          },
          "domain": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "dataId": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "directGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "default": []
          },
          "isStaticContent": {
            "type": "boolean",
            "nullable": true,
            "default": null
          },
          "expressionAlias": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "expires": {
            "type": "boolean",
            "default": false
          }
        },
        "example": "{\n  \"id\": \"id\",\n  \"name\": \"name\",\n  \"description\": \"description\",\n  \"category\": \"UNKNOWN\",\n  \"filename\": \"filename\",\n  \"fileSize\": 0,\n  \"device\": \"deviceId\",\n  \"fileType\": \"fileType\",\n  \"username\": \"username\",\n  \"password\": \"password\",\n  \"location\": \"INTERNAL\",\n  \"domain\": \"/\",\n  \"dataId\": \"dataId\",\n  \"properties\": {\n    \"additionalProp1\": \"value1\",\n    \"additionalProp2\": \"value2\",\n    \"additionalProp3\": \"value3\"\n  },\n  \"directGroups\": [\n    \"group\"\n  ],\n  \"isStaticContent\": false,\n  \"expressionAlias\": \"expressionAlias\",\n  \"expires\": false\n}"
      },
      "ResourceId": {
        "type": "string",
        "title": "ResourceId"
      },
      "ResourceSource": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "DataModelSource": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ]
              }
            },
            "required": [
              "DataModelSource"
            ]
          },
          {
            "type": "object",
            "properties": {
              "SettingValueSource": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "SettingValueSource"
            ]
          }
        ]
      },
      "SampleBatch": {
        "type": "object",
        "properties": {
          "batch": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringSample"
            }
          },
          "nextCursor": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SampleCursor"
              }
            ]
          }
        },
        "required": [
          "batch",
          "nextCursor"
        ]
      },
      "SampleCursor": {
        "type": "integer",
        "format": "int64"
      },
      "SecurityPolicyId": {
        "type": "string"
      },
      "SettingValueDTO": {
        "type": "object",
        "properties": {
          "groupId": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupId"
              }
            ],
            "default": null
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "locked": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "Successful": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      },
      "TaskCallback": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "uri",
          "name"
        ]
      },
      "TaskConfig": {
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskParameter"
            },
            "default": []
          },
          "isActive": {
            "type": "boolean",
            "nullable": true,
            "default": null
          }
        }
      },
      "TaskDTO": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TaskId"
          },
          "config": {
            "$ref": "#/components/schemas/TaskConfig"
          }
        },
        "required": [
          "id",
          "config"
        ]
      },
      "TaskId": {
        "type": "string"
      },
      "TaskParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "TaskReportDTO": {
        "type": "object",
        "properties": {
          "taskId": {
            "$ref": "#/components/schemas/TaskId"
          },
          "deviceId": {
            "$ref": "#/components/schemas/DeviceIdDTO"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "finishTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdateTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "summary": {
            "type": "string"
          },
          "blocking": {
            "type": "boolean"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskParameter"
            }
          },
          "response": {
            "example": "string"
          }
        },
        "required": [
          "taskId",
          "deviceId",
          "startTime",
          "finishTime",
          "lastUpdateTime",
          "status",
          "summary",
          "blocking",
          "properties"
        ]
      },
      "TaskReportId": {
        "type": "object",
        "properties": {
          "taskId": {
            "$ref": "#/components/schemas/TaskId"
          },
          "deviceId": {
            "$ref": "#/components/schemas/DeviceIdDTO"
          }
        },
        "required": [
          "taskId",
          "deviceId"
        ]
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "InProgress",
          "Success",
          "Warning",
          "Error",
          "NotStarted"
        ]
      },
      "TaskTemplateInvocation": {
        "type": "object",
        "properties": {
          "templateName": {
            "type": "string"
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskConfig"
              }
            ],
            "default": {"taskName":null,"parameters":[],"isActive":null}
          },
          "callback": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCallback"
              }
            ],
            "default": null
          }
        },
        "required": [
          "templateName"
        ]
      },
      "TextualAggregate": {
        "type": "object",
        "properties": {
          "bucketStart": {
            "type": "string",
            "format": "date-time"
          },
          "bucketEnd": {
            "type": "string",
            "format": "date-time"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        },
        "required": [
          "bucketStart",
          "bucketEnd",
          "values"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UserId"
          },
          "login": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "superUser": {
            "type": "boolean"
          },
          "staff": {
            "type": "boolean"
          },
          "domain": {
            "$ref": "#/components/schemas/DomainIdDTO"
          },
          "accessSchedule": {
            "type": "string"
          },
          "securityPolicyId": {
            "$ref": "#/components/schemas/SecurityPolicyId"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "default": null
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          }
        },
        "required": [
          "userId",
          "login",
          "active",
          "superUser",
          "staff",
          "domain",
          "accessSchedule",
          "securityPolicyId",
          "expirationDate",
          "creationDate",
          "roles"
        ]
      },
      "UserId": {
        "type": "string"
      },
      "WorkflowResultDTO": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "response": {
            "example": "string"
          }
        },
        "required": [
          "date",
          "status",
          "response"
        ]
      }
    },
    "securitySchemes": {
      "auth": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "http://demo.avsystem.com:8086/api/auth/oauth_password"
          }
        }
      }
    }
  },
  "security": [
    {
      "auth": []
    }
  ]
}